macos_instance:
  image: ghcr.io/cirruslabs/macos-monterey-xcode:latest

task:
  name: AppleM1/LLVM
  compile_script:
  - brew install llvm
  - export PATH=/opt/homebrew/opt/llvm/bin:$PATH
  - export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
  - export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
  - make TARGET=VORTEX USE_OPENMP=1 CC=clang

task:
  name: AppleM1/LLVM/ILP64
  compile_script:
  - brew install llvm
  - export PATH=/opt/homebrew/opt/llvm/bin:$PATH
  - export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
  - export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
  - make TARGET=VORTEX USE_OPENMP=1 CC=clang INTERFACE64=1

task:
  name: AppleM1/LLVM/CMAKE
  compile_script:
  - brew install llvm
  - export PATH=/opt/homebrew/opt/llvm/bin:$PATH
  - export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
  - export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
  - mkdir build
  - cd build
  - cmake -DTARGET=VORTEX -DCMAKE_C_COMPILER=clang -DBUILD_SHARED_LIBS=ON ..
  - make

task:
  name: AppleM1/GCC/MAKE/OPENMP
  compile_script:
  - brew install gcc@11
  - export PATH=/opt/homebrew/bin:$PATH
  - export LDFLAGS="-L/opt/homebrew/lib"
  - export CPPFLAGS="-I/opt/homebrew/include"
  - make CC=gcc-11 FC=gfortran-11 USE_OPENMP=1
  
macos_instance:
  image: ghcr.io/cirruslabs/macos-monterey-xcode:latest
task:
  name: AppleM1/LLVM x86_64 xbuild
  compile_script:
  - #brew install llvm
  - export #PATH=/opt/homebrew/opt/llvm/bin:$PATH
  - export #LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
  - export #CPPFLAGS="-I/opt/homebrew/opt/llvm/include" 
  - export ARCHS="i386 x86_64"
  - export ARCHS_STANDARD="i386 x86_64"
  - export ARCHS_STANDARD_32_64_BIT="i386 x86_64"
  - export ARCHS_STANDARD_64_BIT=x86_64
  - export ARCHS_STANDARD_INCLUDING_64_BIT="i386 x86_64"
  - export ARCHS_UNIVERSAL_IPHONE_OS="i386 x86_64"
  - export VALID_ARCHS="i386 x86_64"
  - xcrun --sdk macosx --show-sdk-path
  - xcodebuild -version
  - export CC=/Applications/Xcode-14.0.0.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang
  - export CFLAGS="-O2 -unwindlib=none -Wno-macro-redefined -isysroot /Applications/Xcode-14.0.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk -arch x86_64"
  - make TARGET=CORE2 DYNAMIC_ARCH=1 NUM_THREADS=32 HOSTCC=clang NOFORTRAN=1 RANLIB="ls -l"
  always:
    config_artifacts:
      path: "*conf*"
      type: text/plain
#  lib_artifacts:
#    path: "libopenblas*"
#    type: application/octet-streamm

macos_instance:
  image: ghcr.io/cirruslabs/macos-monterey-xcode:latest
task:
  name: AppleM1/LLVM armv8-ios xbuild
  compile_script:
  - #brew install llvm
  - export #PATH=/opt/homebrew/opt/llvm/bin:$PATH
  - export #LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
  - export #CPPFLAGS="-I/opt/homebrew/opt/llvm/include" 
  - export CC=/Applications/Xcode-14.0.0.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang
  - export CFLAGS="-O2 -unwindlib=none -Wno-macro-redefined -isysroot /Applications/Xcode-14.0.0.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS16.0.sdk -arch arm64 -miphoneos-version-min=10.0"
  - make TARGET=ARMV8 NUM_THREADS=32 HOSTCC=clang NOFORTRAN=1 CROSS=1
  always:
    config_artifacts:
      path: "*conf*"
      type: text/plain

macos_instance:
  image: ghcr.io/cirruslabs/macos-monterey-xcode:latest
task:
  name: AppleM1/LLVM armv7-androidndk xbuild
  compile_script:
  - #brew install android-ndk
  - export #PATH=/opt/homebrew/opt/llvm/bin:$PATH
  - export #LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
  - export #CPPFLAGS="-I/opt/homebrew/opt/llvm/include" 
  - find /System/Volumes/Data/opt/homebrew/Caskroom/android-ndk/25b -name "armv7a-linux-androideabi*-ranlib"
  - #export CC=/Applications/Xcode-13.4.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang
  - #export CFLAGS="-O2 -unwindlib=none -Wno-macro-redefined -isysroot /Applications/Xcode-13.4.1.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS16.0.sdk -arch arm64 -miphoneos-version-min=10.0"
  - export CC=/System/Volumes/Data/opt/homebrew/Caskroom/android-ndk/25b/AndroidNDK8937393.app/Contents/NDK/toolchains/llvm/prebuilt/darwin-x86_64/bin/armv7a-linux-androideabi23-clang
  - make TARGET=ARMV7 ARM_SOFTFP_ABI=1 NUM_THREADS=32 HOSTCC=clang NOFORTRAN=1 RANLIB="ls -l"
  always:
    config_artifacts:
      path: "*conf*"
      type: text/plain

task:
  name: NeoverseN1
  arm_container:
    image: node:latest
  compile_script:
  - make

  task:
  name: NeoverseN1-ILP64
  arm_container:
    image: node:latest
  compile_script:
  - make INTERFACE64=1

task:
  name: NeoverseN1-OMP
  arm_container:
    image: node:latest
    cpu: 8
  compile_script:
  - make USE_OPENMP=1

FreeBSD_task:
  name: FreeBSD-gcc12
  freebsd_instance:
    image_family: freebsd-13-2
  install_script:
  - pkg update -f && pkg upgrade -y && pkg install -y gmake gcc
  compile_script:
  - ls -l /usr/local/lib
  - gmake CC=gcc 


FreeBSD_task:
  name: freebsd-gcc12-ilp64
  freebsd_instance:
    image_family: freebsd-13-2
  install_script:
  - pkg update -f && pkg upgrade -y && pkg install -y gmake gcc
  compile_script:
  - ls -l /usr/local/lib
  - gmake CC=gcc INTERFACE64=1

#task:
#  name: Windows/LLVM16     --- too slow ---
#  windows_container:
#    image: cirrusci/windowsservercore:cmake-2021.12.07
#  install_script: 
#    - choco list --localonly
#    - choco install -y llvm
#    - # choco install -y cmake --installargs '"ADD_CMAKE_TO_PATH=System"'
#    - choco install -y ninja
#    - refreshenv
#    - cd "c:/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/VC/Auxiliary/Build"
#    - vcvarsall x64
#    - cd "C:\Users\ContainerAdministrator\AppData\Local\Temp\cirrus-ci-build"
#    - cmake -S . -B build -G "Ninja" -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl -DCMAKE_MT=mt -DCMAKE_BUILD_TYPE=Release
#    - cd build
#    - cmake --build .
#    - ctest


task:
  name: arm64_graviton
  aws_credentials: ENCRYPTED[ee040e2212311fb30afdf84911d82a8ab9b2dd9963a0e285ac02f918d0cb2cf0f7787669e5960e70cee9c7be93a460eb]
  matrix:
    - env:
        BUILD: make
    - env:
        BUILD: cmake
  ec2_instance:
    image: ami-08c417ecfdc73a8c2
    type: c7g.large
    region: us-east-1
    architecture: arm64
  clone_script:
    - apt update
    - apt install -y git
    - git clone https://github.com/${CIRRUS_REPO_FULL_NAME}.git
  print_sys_info_script:
    - cat /proc/cpuinfo
  dependencies_script:
    - apt install -y gfortran cmake ccache libtinfo5
  cache:
    folder: ~/.ccache
    fingerprint_script: echo $BUILD
    populate_script:
      - test -d ~/.ccache || mkdir -p ~/.ccache
      - echo "max_size = 300M" > ~/.ccache/ccache.conf
      - echo "compression = true" >> ~/.ccache/ccache.conf
      - if [ "${BUILD}" = "make" ]; then export PATH="/usr/lib/ccache:$PATH"; fi
      - ccache -s
  build_script:
    - |
      cd OpenBLAS
      case "${BUILD}" in
        "make")
          make -j$(nproc) DYNAMIC_ARCH=1 USE_OPENMP=0 FC="ccache gfortran"
          ;;
        "cmake")
          mkdir build && cd build
          cmake -DDYNAMIC_ARCH=1 \
                -DNOFORTRAN=0 \
                -DBUILD_WITHOUT_LAPACK=0 \
                -DCMAKE_VERBOSE_MAKEFILE=ON \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_Fortran_COMPILER=gfortran \
                -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                -DCMAKE_Fortran_COMPILER_LAUNCHER=ccache \
                ..
          cmake --build .
          ;;
        *)
          echo "Configuration not supported"
          exit 1
          ;;
      esac
  ccache_status_script:
    - ccache -s
  test_script:
    - |
      cd OpenBLAS
      case "${BUILD}" in
        "make")
          MAKE_FLAGS='DYNAMIC_ARCH=1 USE_OPENMP=0'
          echo "::group::Tests in 'test' directory"
          make -C test $MAKE_FLAGS FC="ccache gfortran"
          echo "::endgroup::"
          echo "::group::Tests in 'ctest' directory"
          make -C ctest $MAKE_FLAGS FC="ccache gfortran"
          echo "::endgroup::"
          echo "::group::Tests in 'utest' directory"
          make -C utest $MAKE_FLAGS FC="ccache gfortran"
          echo "::endgroup::"
          ;;
        "cmake")
          cd build && ctest
          ;;
        *)
          echo "Configuration not supported"
          exit 1
          ;;
      esac
